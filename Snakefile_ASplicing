#!/usr/bin/env python

import os
import sys
import re
import glob


include: "config_AS.py"


RAWDATA_DIR = os.getcwd()

FILES = [ os.path.basename(x) for x in glob.glob("Experience/*") ] 


if PAIRED_END:
	SAMPLES = list(set([ "_".join(x.split("_")[:2]) for x in FILES]))
else:
	SAMPLES = list(set([ x.rstrip(".fastq.gz") for x in FILES]))


CONDITIONS = list(set(x.split("_")[0] for x in SAMPLES))

CONDITION_TO_SAMPLES = {}

for condition in CONDITIONS:
	CONDITION_TO_SAMPLES[condition] = [sample for sample in SAMPLES if sample.split("_")[0] == condition]



DIRS = ['Reference','Reference/star/','Mapping','Mapping/Out','Trimming','pass1','genomeForPass2','pass2']

for path in DIRS:
	if not os.path.exists(path):
		os.mkdir(path)



rule all:	
	input:
		xpDesign = "experimentalDesign.txt",
		trimming = expand('Trimming/{sample}_R1.trim.fastq.gz', sample=SAMPLES),
		starRef = "Reference/star/chrName.txt",
		pass1 = expand("pass1/{sample}SJ.out.tab", sample=SAMPLES),
		filt_SJ = expand("pass1/{sample}SJ.out.filt.tab", sample=SAMPLES),
		SJ_db = "Reference/SJ.db",
		genomePass2 = s"genomeForPass2/chrName.txt"
#		expand("Mapping/{sample}.bam", sample=SAMPLES)

	




rule xpDesign: 		# Création d'un fichier txt qui décrit simplement le design expérimental, ceci est nécessaire pour l'étape d'analyse des gènes différentiellement exprimés sous R
	output:
		"experimentalDesign.txt"

	run:
		with open("experimentalDesign.txt","w") as xpDesign:
			xpDesign.write("batch,condition\n")

			for condition,samples in CONDITION_TO_SAMPLES.items():
				for sample in samples:
					xpDesign.write(sample+".sorted.bam,"+condition+"\n")





FASTA_NAME = os.path.basename(GET_GENOME)
GTF_NAME = os.path.basename(GET_GTF)
DESCRIPTION_NAME = os.path.basename(GET_DESCRIPTION)


rule get_reference_files:	# Règle qui récupère le génome de référence ainsi que le fichier
							# d'annotation des gènes d'une espèce donnée
	output:
		fasta = "Reference/reference.fasta",
		gtf = "Reference/reference.gtf",
		description = "description.txt"

	params:
		get_genome = GET_GENOME,
		get_gtf = GET_GTF,
		get_description = GET_DESCRIPTION,
		fasta_name = FASTA_NAME,
		gtf_name = GTF_NAME,
		description_name = DESCRIPTION_NAME

	message: ''' --- downloading fasta and gtf files --- '''

	shell: ''' 
		wget {params.get_genome}; mv {params.fasta_name} {output.fasta}
		wget {params.get_gtf}; mv {params.gtf_name} reference.gff
		awk '{{ sub(/'ChrM'/,"mitochondria"); sub(/'ChrC'/,"chloroplast"); sub(/'Chr'/,"");print}}' reference.gff > reference_clean.gff
		rm reference.gff
		gffread reference_clean.gff -T -o {output.gtf}
		rm reference_clean.gff
		wget {params.get_description}
		mv {params.description_name} {output.description}
		'''



if PAIRED_END:
	rule trimming_PE: 		
		input:
			r1 = 'Experience/{sample}_R1.fastq.gz',
			r2 = 'Experience/{sample}_R2.fastq.gz'

		output:
			r1 = 'Trimming/{sample}_R1.trim.fastq.gz',
			r2 = 'Trimming/{sample}_R2.trim.fastq.gz'

		params:
			cut_trim = CUT_TRIM

		message: ''' --- Trimming  --- '''

		shell: ' cutadapt -l {params.cut_trim} -m {params.cut_trim} -o {output.r1} -p {output.r2} {input.r1} {input.r2} -j 8 --pair-filter=any '


else:
	rule trimming_SE: 		
		input:
			r = 'Experience/{sample}.fastq.gz'

		output:
			'Trimming/{sample}.trim.fastq.gz'

		params:
			cut_trim = CUT_TRIM

		message: ''' --- Trimming  --- '''

		shell: ' cutadapt -l {params.cut_trim} -m {params.cut_trim} -o {output} {input} -j 8 --pair-filter=any '


GENOME = "Reference/reference.fasta"
GTF = "Reference/reference.gtf"
# 
# 
rule indexation_genome:		# Indexation du génome de référence 
	input:
		genome = GENOME,
		gtf = GTF,
		starref = 'Reference/star/'
# 
	output:
		"Reference/star/chrName.txt"

	params:
		read_length = CUT_TRIM - 1

# 
	threads: 8
# 
	message: ''' --- Indexation du génome de référence --- '''
# 
	shell: ' STAR --runThreadN {threads} --runMode genomeGenerate --sjdbOverhang {params.read_length} \
	--genomeDir {input.starref} --genomeFastaFiles {input.genome} --sjdbGTFfile {input.gtf}'


# if PAIRED_END:
# 	rule mapping_PE:		
# 		input:
# 			gtf = GTF,
# 			index = "Reference/star/chrName.txt",
# 			starref = 'Reference/star/',
# 			r1 = 'Trimming/{sample}_R1.trim.fastq.gz',
# 			r2 = 'Trimming/{sample}_R2.trim.fastq.gz'

# 		output:
# 			"Mapping/{sample}.bam"

# 		message: ''' --- Alignement des lectures --- '''

# 		threads: 6

# 		shell: ' STAR --runThreadN {threads} \
# 		--sjdbGTFfile {input.gtf} --sjdbOverhang 100 \
# 		--genomeDir {input.starref} \
# 		--outFileNamePrefix Mapping/{wildcards.sample} \
# 		--readFilesIn {input.r1} {input.r2} \
# 		--alignEndsType EndToEnd \
# 		--outSAMtype BAM SortedByCoordinate; \
# 		mv Mapping/{wildcards.sample}Aligned.sortedByCoord.out.bam {output};\
# 		mv Mapping/{wildcards.sample}*out* Mapping/Out'		


rule pass1:
	input:
		gtf = GTF,
		genome = GENOME,
		r1 = 'Trimming/{sample}_R1.trim.fastq.gz',
		r2 = 'Trimming/{sample}_R2.trim.fastq.gz',
		starRef = 'Reference/star'

	output:
		"pass1/{sample}SJ.out.tab"

	threads: 4

	shell:' STAR --runThreadN {threads} --genomeDir {input.starRef} --sjdbGTFfile {input.gtf} \
		--outFileNamePrefix pass1/{wildcards.sample} --readFilesIn {input.r1} {input.r2} \
		--readFilesCommand "gunzip -c" \
		--outSAMtype BAM Unsorted'


rule filt_SJ_out:
	input: 
		expand("pass1/{sample}SJ.out.tab", sample=SAMPLES)

	output:
		"SJ.filt.tab"

	shell:''' 
	gawk '$6==1 || ($6==0 && $7>2)' {input} >> {output};

	'''

rule SJ_db:
	input:
		"SJ.filt.tab"

	output: 
		"Reference/SJ.db"

	shell: '''
	awk 'BEGIN {{OFS="\t"; strChar[0]="."; strChar[1]="+"; strChar[2]="-";}} {{if($5>0){{print $1,$2,$3,strChar[$4]}}}}' {input} > {output}
	'''


rule genomeForPass2:
	input:
		genome = GENOME,
		SJ = "Reference/SJ.db"

	output:
		"genomeForPass2/chrName.txt"

	params:
		genomedir = "genomeForPass2/"

	shell:' STAR --runThreadN {threads} --runMode genomeGenerate --sjdbOverhang {params.read_length} \
	--genomeDir {params.genomedir} --genomeFastaFiles {input.genome} --sjdbFileChrStartEnd {input.SJ}'









	# threads: 4

	# shell:' STAR --runThreadN {threads} --chimSegmentMin 2 --outFilterMismatchNmax 3\
 # 		--alignIntronMax 299999 \
 # 		--genomeDir genomeForPass2 \
 # 		--outFileNamePrefix pass2/{wildcards.sample} --readFilesIn {input.r1} {input.r2} \
 # 		--alignEndsType EndToEnd --sjdbOverhang 114 --readFilesCommand "gunzip -c" \
 # 		--outSAMtype BAM SortedByCoordinate; \
 # 		mv pass2/{wildcards.sample}Aligned.sortedByCoord.out.bam {output};'





# '''
# 	awk 'BEGIN {OFS="\t"; strChar[0]="."; strChar[1]="+"; strChar[2]="-";} \{if($5>0)\{print $1,$2,$3,strChar[$4]\}\}' SJ.filt.tab > {output};
# 	rm SJ.filt.tab
# 	'''




# else:
# 	rule mapping_SE:		
# 		input:
# 			gtf = GTF,
# 			index = "Reference/star/chrName.txt",
# 			starref = 'Reference/star/',
# 			r = 'Trimming/{sample}.trim.fastq'

# 		output:
# 			"Mapping/{sample}.bam"

# 		message: ''' --- Alignement des lectures --- '''

# 		threads: 6

# 		shell: ' STAR --runThreadN {threads} \
# 		--sjdbGTFfile {input.gtf} \
# 		--genomeDir {input.starref} \
# 		--outFileNamePrefix Mapping/{wildcards.sample} \
# 		--readFilesIn {input.r} \
# 		--alignEndsType EndToEnd \
# 		--outSAMtype BAM SortedByCoordinate; \
# 		mv Mapping/{sample}Aligned.sortedByCoord.out.bam {output};\
# 		mv Mapping/{sample}*out* Mapping/Out'



# rule index_bam:
# 	input:
# 		"Mapping/{sample}.bam"

# 	output:
# 		"Mapping/{sample}.bam.bai"

# 	shell: ''' samtools index {input} > {output} '''



# # rule rMATs_Con_Bas:
# #     input: 
# #         Con= expand('Mapping/{sample}.bam', sample=CON_SAMPLES),
# #         Bas = expand('Mapping/{sample}.bam', sample=BAS_SAMPLES)
# #     params:
# #         outdir = 'rMATS'

# #     output: 'alternative_splicing_rMATS/All_T1_vs_T0/MATS_output/AS_Event.MATS.JunctionCountOnly.txt'

# #     run:
# #         b1 = ','.join(input.Con),
# #         b2 = ','.join(input.Bas)
# #         gtf = GTF
# #         star_index = STAR_INDEX

# #         shell(r'''python2.7 /data/home/darbotv/happy_bin/rMATS.4.0.2/rMATS-turbo-Linux-UCS4/rmats.py \
# #         	-b1 {b1} -b2 {b2} -len 87 -t single -gtf {gtf} \
# #         	-bi {star_index} -o {params.outdir} 1>&2''')


# #nohup python2.7 /data/home/darbotv/happy_bin/rMATS.4.0.2/rMATS-turbo-Linux-UCS4/rmats.py --b1 b1.txt --b2 b2.txt --readLength 139 -t paired --gtf reference.gtf --bi Reference/star/ --od rMATS &

# # python2.7 /Users/vindarbo/happy_bin/rMATS.4.0.1/rMATS-turbo-Mac-UCS2/rmats.py --b1 b1.txt --b2 b2.txt --readLength 150 -t paired --gtf Reference/reference.gtf --bi Reference/star/ --od rMATS_HS/ &
