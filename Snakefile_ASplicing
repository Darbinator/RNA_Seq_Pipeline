#!/usr/bin/env python

import os
import sys
import re
import glob


include: "config_AS.py"


RAWDATA_DIR = os.getcwd()

FILES = [ os.path.basename(x) for x in glob.glob("Experience/*") ] 


if PAIRED_END:
	SAMPLES = list(set([ "_".join(x.split("_")[:2]) for x in FILES]))
else:
	SAMPLES = list(set([ x.rstrip(".fastq.gz") for x in FILES]))


CONDITIONS = list(set(x.split("_")[0] for x in SAMPLES))

CONDITION_TO_SAMPLES = {}

for condition in CONDITIONS:
	CONDITION_TO_SAMPLES[condition] = [sample for sample in SAMPLES if sample.startswith(condition)]


CON_SAMPLES = list(filter(lambda x: 'Control' in x, SAMPLES))
BAS_SAMPLES = list(filter(lambda x: 'Basal' in x, SAMPLES))




DIRS = ['Reference','Reference/star/','Mapping','Mapping/Out','Trimming','rMATS']

for path in DIRS:
	if not os.path.exists(path):
		os.mkdir(path)



rule all:	
	input:
		expand("Mapping/{sample}.bam", sample=SAMPLES)

	




rule xpDesign: 		# Création d'un fichier txt qui décrit simplement le design expérimental, ceci est nécessaire pour l'étape d'analyse des gènes différentiellement exprimés sous R
	output:
		"experimentalDesign.txt"

	run:
		with open("experimentalDesign.txt","w") as xpDesign:
			xpDesign.write("batch,condition\n")

			for condition,samples in CONDITION_TO_SAMPLES.items():
				for sample in samples:
					xpDesign.write(sample+".sorted.bam,"+condition+"\n")





FASTA_NAME = os.path.basename(GET_GENOME)
GTF_NAME = os.path.basename(GET_GTF)
DESCRIPTION_NAME = os.path.basename(GET_DESCRIPTION)


rule get_reference_files:	# Règle qui récupère le génome de référence ainsi que le fichier
							# d'annotation des gènes d'une espèce donnée
	output:
		fasta = "Reference/reference.fasta",
		gtf = "reference.gtf",
		description = "description.txt"

	params:
		get_genome = GET_GENOME,
		get_gtf = GET_GTF,
		get_description = GET_DESCRIPTION,
		fasta_name = FASTA_NAME,
		gtf_name = GTF_NAME,
		description_name = DESCRIPTION_NAME

	message: ''' --- downloading fasta and gtf files --- '''

	shell: ''' 
		wget {params.get_genome}; mv {params.fasta_name} {output.fasta}
		wget {params.get_gtf}; mv {params.gtf_name} reference.gff
		awk '{{ sub(/'ChrM'/,"mitochondria"); sub(/'ChrC'/,"chloroplast"); sub(/'Chr'/,"");print}}' reference.gff > reference_clean.gff
		rm reference.gff
		gffread reference_clean.gff -T -o {output.gtf}
		rm reference_clean.gff
		wget {params.get_description}
		mv {params.description_name} {output.description}
		'''




rule trimming_SE: 		
	input:
		r = 'Experience/{sample}.fastq.gz'

	output:
		'Trimming/{sample}.trim.fastq'

	params:
		cut_trim = CUT_TRIM

	message: ''' --- Trimming  --- '''

	shell: ' cutadapt -u {params.cut_trim} -o {output} {input} '



rule trimming_PE: 		
	input:
		r1 = 'Experience/{sample}_R1.fastq.gz',
		r2 = 'Experience/{sample}_R2.fastq.gz'

	output:
		r1 = 'Trimming/{sample}_R1.trim.fastq',
		r2 = 'Trimming/{sample}_R2.trim.fastq'

	params:
		cut_trim = CUT_TRIM

	message: ''' --- Trimming  --- '''

	shell: ' cutadapt -u {params.cut_trim} -U {params.cut_trim} -o {output.r1} -p {output.r2} {input.r1} {input.r2} '



GENOME = "Reference/reference.fasta"
GTF = "reference.gtf"


rule indexation_genome:		# Indexation du génome de référence 
	input:
		genome = GENOME,
		gtf = GTF,
		starref = 'Reference/star/'

	output:
		"Reference/star/chrName.txt"

	threads: 8

	message: ''' --- Indexation du génome de référence --- '''

	shell: ' STAR --runThreadN {threads} --runMode genomeGenerate  \
	--genomeDir {input.starref} --genomeFastaFiles {input.genome} --sjdbGTFfile {input.gtf}'


rule mapping_SE:		
	input:
		gtf = GTF,
		index = "Reference/star/chrName.txt",
		starref = 'Reference/star/',
		r = 'Trimming/{sample}.trim.fastq'

	output:
		"Mapping/{sample}.bam"

	message: ''' --- Alignement des lectures --- '''

	threads: 6

	shell: ' STAR --runThreadN {threads} \
	--sjdbGTFfile {input.gtf} \
	--genomeDir {input.starref} \
	--outFileNamePrefix Mapping/{wildcards.sample} \
	--readFilesIn {input.r} \
	--alignEndsType EndToEnd \
	--outSAMtype BAM SortedByCoordinate; \
	mv Mapping/{sample}Aligned.sortedByCoord.out.bam {output}\
	mv Mapping/{sample}*out* Mapping/Out'


rule index_bam:
	input:
		"Mapping/{sample}.bam"

	output:
		"Mapping/{sample}.bam.bai"

	shell: ''' samtools index {input} > {output} '''


rule rMATs_Con_Bas:
    input: 
        Con= expand('Mapping/{sample}.bam', sample=CON_SAMPLES),
        Bas = expand('Mapping/{sample}.bam', sample=BAS_SAMPLES)
    params:
        outdir = 'rMATS'
        
    output: 'alternative_splicing_rMATS/All_T1_vs_T0/MATS_output/AS_Event.MATS.JunctionCountOnly.txt'

    run:
        b1 = ','.join(input.Con),
        b2 = ','.join(input.Bas)
        gtf = GTF
        star_index = STAR_INDEX

        shell(r'''python2.7 /data/home/darbotv/happy_bin/rMATS.4.0.2/rMATS-turbo-Linux-UCS4/rmats.py \
        	-b1 {b1} -b2 {b2} -len 87 -gtf {gtf} \
        	-bi {star_index} -o {params.outdir} 1>&2''')





