#!/usr/bin/env python

import os
import sys
import re
import glob


include: "config_AS.py"


RAWDATA_DIR = os.getcwd()

FILES = [ os.path.basename(x) for x in glob.glob("Experience/*") ] 


if PAIRED_END:
	SAMPLES = list(set([ "_".join(x.split("_")[:2]) for x in FILES]))
else:
	SAMPLES = list(set([ x.rstrip(".fastq.gz") for x in FILES]))


CONDITIONS = list(set(x.split("_")[0] for x in SAMPLES))

CONDITION_TO_SAMPLES = {}

for condition in CONDITIONS:
	CONDITION_TO_SAMPLES[condition] = [sample for sample in SAMPLES if sample.startswith(condition)]


DIRS = ['Reference','Reference/star/','Mapping','Mapping/Out','Trimming','featureCounts','DEG']

for path in DIRS:
	if not os.path.exists(path):
		os.mkdir(path)



rule all:	
	input:
		r = expand('Trimming/{sample}.trim.fastq', sample=SAMPLES)

	




rule xpDesign: 		# Création d'un fichier txt qui décrit simplement le design expérimental, ceci est nécessaire pour l'étape d'analyse des gènes différentiellement exprimés sous R
	output:
		"experimentalDesign.txt"

	run:
		with open("experimentalDesign.txt","w") as xpDesign:
			xpDesign.write("batch,condition\n")

			for condition,samples in CONDITION_TO_SAMPLES.items():
				for sample in samples:
					xpDesign.write(sample+".sorted.bam,"+condition+"\n")





FASTA_NAME = os.path.basename(GET_GENOME)
GTF_NAME = os.path.basename(GET_GTF)
DESCRIPTION_NAME = os.path.basename(GET_DESCRIPTION)


rule get_reference_files:	# Règle qui récupère le génome de référence ainsi que le fichier
							# d'annotation des gènes d'une espèce donnée
	output:
		fasta = "Reference/reference.fasta",
		gtf = "reference.gtf",
		description = "description.txt"

	params:
		get_genome = GET_GENOME,
		get_gtf = GET_GTF,
		get_description = GET_DESCRIPTION,
		fasta_name = FASTA_NAME,
		gtf_name = GTF_NAME,
		description_name = DESCRIPTION_NAME

	message: ''' --- downloading fasta and gtf files --- '''

	shell: ''' 
		wget {params.get_genome}; mv {params.fasta_name} {output.fasta}
		wget {params.get_gtf}; mv {params.gtf_name} reference.gff
		awk '{{ sub(/'ChrM'/,"mitochondria"); sub(/'ChrC'/,"chloroplast"); sub(/'Chr'/,"");print}}' reference.gff > reference_clean.gff
		rm reference.gff
		gffread reference_clean.gff -T -o {output.gtf}
		rm reference_clean.gff
		wget {params.get_description}
		mv {params.description_name} {output.description}
		'''




rule trimming_SE: 		
	input:
		r = 'Experience/{sample}.fastq.gz'

	output:
		'Trimming/{sample}.trim.fastq'

	params:
		cut_trim = CUT_TRIM

	message: ''' --- Trimming  --- '''

	shell: ' cutadapt -u {params.cut_trim} -o {output} {input} '



rule trimming_PE: 		
	input:
		r1 = 'Experience/{sample}_R1.fastq.gz',
		r2 = 'Experience/{sample}_R2.fastq.gz'

	output:
		r1 = 'Trimming/{sample}_R1.trim.fastq',
		r2 = 'Trimming/{sample}_R2.trim.fastq'

	params:
		cut_trim = CUT_TRIM

	message: ''' --- Trimming  --- '''

	shell: ' cutadapt -u {params.cut_trim} -U {params.cut_trim} -o {output.r1} -p {output.r2} {input.r1} {input.r2} '




rule indexation_genome:		# Indexation du génome de référence 
	input:
		genome = GENOME,
		gtf = GTF,
		starref = 'Reference/star/'

	output:
		"Reference/star/chrName.txt"

	threads: 16

	message: ''' --- Indexation du génome de référence --- '''

	shell: ' STAR --runThreadN {threads} --runMode genomeGenerate \
	--genomeDir {input.starref} --genomeFastaFiles {input.genome} --sjdbGTFfile {input.gtf}'


